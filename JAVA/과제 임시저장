
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Vector;
import javax.swing.RowSorter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author mhso0
 */
public class MainFrame extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainFrame.class.getName());

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblOrder = new javax.swing.JLabel();
        txtOrder = new javax.swing.JTextField();
        btnInsert = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMovie = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtGallery = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setText("Table 예제");

        lblOrder.setText("순      위");

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        jLabel3.setText("영화제목");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel4.setText("관객 동원");

        btnDelete.setText("Delete");
        btnDelete.setToolTipText("");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "로마의 휴일",  new Integer(1000000)},
                { new Integer(2), "타이타닉",  new Integer(800000)},
                { new Integer(3), "죽은 시인의 사회",  new Integer(600000)},
                { new Integer(4), "쉬리",  new Integer(400000)},
                {null, null, null}
            },
            new String [] {
                "순위", "영화 제목", "관객 동원"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(lblOrder))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnInsert))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(lblTitle))
                                    .addComponent(txtGallery, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSort))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblTitle)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrder)
                    .addComponent(txtOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInsert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtGallery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        int iCntRow = 0;
        iCntRow = jTable1.getSelectedRow();
        
        txtOrder.setText(jTable1.getValueAt(iCntRow, 0).toString());
        txtMovie.setText(jTable1.getValueAt(iCntRow, 1).toString());
        txtGallery.setText(jTable1.getValueAt(iCntRow, 2).toString());
    }                                    

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {                                          
        DefaultTableModel jTableModel = (DefaultTableModel)jTable1.getModel();    
        String newMovieTitle = txtMovie.getText().trim();
        
        int iCntRow = 0;
        int iOrder = 0;
        int iGallery = 0;
        
        iCntRow = jTable1.getRowCount();
        for(int idx = 0; idx<jTable1.getRowCount(); idx++){
            if(jTable1.getValueAt(idx, 0) ==null){
                iCntRow = idx;
                break;
            }
        }
        
        if (newMovieTitle.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "영화 제목을 입력해 주세요.", "입력 오류", javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
        }
        
        for (int i = 0; i < jTableModel.getRowCount(); i++) {
        Object existingValue = jTableModel.getValueAt(i, 1);
        if (existingValue != null && existingValue.toString().equals(newMovieTitle)) {
            javax.swing.JOptionPane.showMessageDialog(this, "이미 존재하는 영화 제목입니다.", "중복 오류", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
            }
        }
        int nextRank = jTableModel.getRowCount() + 1;
        Object[] newRow = { nextRank, newMovieTitle, iGallery };
        jTableModel.addRow(newRow);        
        iOrder = Integer.parseInt(txtOrder.getText());
        jTable1.setValueAt(iOrder, iCntRow, 0);
        
        jTable1.setValueAt(txtMovie.getText(), iCntRow, 1);
        
        iGallery = Integer.parseInt(txtGallery.getText());
        jTable1.setValueAt(iGallery, iCntRow, 2);
        
    }                                         

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        int iCntRow = 0;
        int iOrder = 0;
        int iGallery = 0;
        
        iCntRow = jTable1.getSelectedRow();
        
        iOrder = Integer.parseInt(txtOrder.getText());
        jTable1.setValueAt(iOrder, iCntRow, 0);
        
        jTable1.setValueAt(txtMovie.getText(), iCntRow, 1);
        
        iGallery = Integer.parseInt(txtGallery.getText());
        jTable1.setValueAt(iGallery, iCntRow, 2);
    }                                         

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        MakeRowData objRowData;
        Vector myVC = new Vector();
        
        int iCntRow = 0;
        iCntRow = jTable1.getSelectedRow();
        
        DefaultTableModel jTableModel = (DefaultTableModel)jTable1.getModel();
        
        for(int iRow = 0; iRow<jTable1.getRowCount(); iRow++){
            if(jTable1.getValueAt(iRow, 0)!= null){
                objRowData = new MakeRowData();
                objRowData.strMovie = jTable1.getValueAt(iRow, 1).toString();
                objRowData.iGallery = Integer.parseInt(jTable1.getValueAt(iRow, 2).toString());
                myVC.add(objRowData);
            }else {
                break;
            }
        }
        myVC.removeElementAt(iCntRow);
        jTableModel.removeRow(iCntRow);
        
        for(int idx = 0; idx < myVC.size(); idx++){
            objRowData = (MakeRowData)myVC.get(idx);
            jTable1.setValueAt(idx+1, idx, 0);
            jTable1.setValueAt(objRowData.strMovie, idx, 1);
            jTable1.setValueAt(objRowData.iGallery, idx, 2);
        }
        String[] strRecord = new String[jTable1.getColumnCount()];
        jTableModel.addRow(strRecord);
        
        txtOrder.setText(null);
        txtMovie.setText(null);
        txtGallery.setText(null);
        
        
    }                                         

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {                                        
        MakeRowData objRowData;
        Vector myVC = new Vector();
        
        for(int iRow = 0; iRow < jTable1.getRowCount(); iRow++){
            if(jTable1.getValueAt(iRow, 0)!= null){
                objRowData = new MakeRowData();
                objRowData.strMovie = jTable1.getValueAt(iRow, 1).toString();
                objRowData.iGallery = Integer.parseInt(jTable1.getValueAt(iRow, 2).toString());
                myVC.add(objRowData);
            }else{
                break;
            }
  
        }
        //2.Sorting(여기가 과제)
        
        for(int idx = 0; idx < myVC.size(); idx++){
            objRowData = (MakeRowData)myVC.get(idx);
            jTable1.setValueAt(idx+1, idx, 0);
            jTable1.setValueAt(objRowData.strMovie, idx, 1);
            jTable1.setValueAt(objRowData.iGallery, idx, 2);
        }
        txtOrder.setText(null);
        txtMovie.setText(null);
        txtGallery.setText(null);
        
        
        TableRowSorter<TableModel> objSorter = new TableRowSorter<>(jTable1.getModel());
        jTable1.setRowSorter(objSorter);
        ArrayList<RowSorter.SortKey> SortKeys = new ArrayList<>();
        
        int columnIndexToSort = 2;
        SortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING));
        objSorter.setSortKeys(sortkeys);
        objSorter.sort();
        
        for(int idx = 0; idx<jTable1.getRowCount(); idx++){
            if(jTable1.getValueAt(idx, 0)!= null)
                jTable1.setValueAt(idx+1, idx, 0);
            else
                break;
        }
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainFrame().setVisible(true));
    }
    
    
    public class MakeRowData{
        public String strMovie;
        public int iGallery;
    }
    public class GalleryDescCompare implements Comparator<Object>{
        @Override
        public int compare(Object arg0, Object arg1){
            if(((MakeRowData)arg0).iGallery > ((MakeRowData)arg1).iGallery)
                return -1;
            else if(((MakeRowData)arg0).iGallery == ((MakeRowData)arg1).iGallery)
                return Integer.compare(((MakeRowData)arg0).iGallery, ((MakeRowData)arg1).iGallery);
            else
                return 1;
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblOrder;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtGallery;
    private javax.swing.JTextField txtMovie;
    private javax.swing.JTextField txtOrder;
    // End of variables declaration                   
}
